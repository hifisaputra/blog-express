import mongoose from '@src/lib/mongoose'
import { Schema, Types, Model } from 'mongoose'
import MongooseDelete from 'mongoose-delete'
import { strToSlug } from '@src/lib/utils'
import { paginate } from '@src/lib/mongoosePagination'

/**
 * @description The category document interface
 * @interface CategoryDocument
 * @property {string} _id The category id authomaticaly generated by MongoDB
 * @property {string} name The category name
 * @property {string} slug The category slug generated from name
 */
interface CategoryDocument {
    _id: Types.ObjectId,
    name: string,
    description?: string,
    slug?: string,
}

/**
 * @description The category method interface for register custom methods
 * @interface CategoryMethod
 */
interface CategoryMethod {
    generateSlug(): Promise<string>
}

/**
 * @description The category model interface for register custom static methods
 * @interface CategoryModel
 * TODO: Find a way to extend the static method trough paginate plugin
 */
interface CategoryModel extends Model<CategoryDocument, Record<string, unknown>, CategoryMethod> {
    paginate(query: Record<string, unknown>, options: Record<string, unknown>): Promise<Record<string, unknown>>
}

/**
 * @description Category database schema
 * @constant CategorySchema
 * @type {Schema<CategoryDocument, CategoryModel, CategoryMethod>}
 * @extends Schema
 * @see https://mongoosejs.com/docs/schematypes.html
 */
const CategorySchema: Schema<CategoryDocument, CategoryModel, CategoryMethod> = new Schema<CategoryDocument, CategoryModel, CategoryMethod>({
    name: {
        type: String,
        required: true,
        text: true,
    },
    slug: {
        type: String,
        unique: true
    },
    description: {
        type: String,
        required: true
    }
}, { timestamps: true })

/**
 * @description Add soft delete to schema
 * @function softDelete
 * @returns {void}
 * @see https://www.npmjs.com/package/mongoose-delete
 */
CategorySchema.plugin(MongooseDelete)

/**
 * @description Register pagination plugin to schema
 */
CategorySchema.plugin(paginate)

/**
 * @description Method to generate unique slug from name
 * if slug is already exist, it will append number to the end of slug
 *
 * @method method
 * @param {string} 'generateSlug'
 * @param {function} async function
 * @returns {Promise<string>}
 */
CategorySchema.method('generateSlug', async function() {
    let slug = strToSlug(this.name)
    const count = await this.model('Category').countDocuments({ slug })
    if (count > 0) {
        slug = `${slug}-${count}`
    }
    return slug
})

/**
 * @description Pre save hook to generate slug
 * @method pre
 * @param {string} 'save'
 * @param {function} async function
 * @returns {Promise<void>}
 * @see https://mongoosejs.com/docs/middleware.html
 */
 CategorySchema.pre('save', async function() {
    if (!this.slug) {
        this.slug = await this.generateSlug()
    }
})

/**
 * @description Category model
 * @constant Category
 * @type {CategoryModel}
 * @see https://mongoosejs.com/docs/models.html
 */
const Category: CategoryModel = mongoose.model<CategoryDocument, CategoryModel>('Category', CategorySchema)

export default Category