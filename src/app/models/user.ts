import { Schema, Types, Model, model } from 'mongoose'
import MongooseDelete from 'mongoose-delete'
import bcrypt from 'bcrypt'
import jwt from 'jsonwebtoken'
import config from '@src/config'

/**
 * @description The user document interface
 * @interface User
 * @property {string} _id The user id authomaticaly generated by MongoDB
 * @property {string} name The user name
 * @property {string} email The user email address, must be unique
 * @property {string} password The user password, will be hashed before save
 * @property {string} profilePicture The user profile picture url
 * @property {string} role The user role, default is 'user'
 */
export interface UserDocument {
    _id: Types.ObjectId,
    name: string,
    email: string,
    password: string,
    profilePicture?: string,
    role?: string
}

/**
 * @description The user method interface for register custom methods
 * @interface UserMethod
 */
interface UserMethod {
    validatePassword(password: string): Promise<boolean>,
    generateToken(): Promise<string>,
}

/**
 * @description The user model interface for register custom static methods
 * @interface UserModel
 */
interface UserModel extends Model<UserDocument, Record<string, unknown>, UserMethod> {
    findByEmail(email: string): Promise<UserDocument | null>,
    emailExists(email: string): Promise<boolean>,
    verifyToken(token: string): Promise<UserDocument | null>
}

/**
 * @description User schema
 * @constant UserSchema
 * @type {Schema<UserDocument, UserModel, UserMethod>}
 * @extends Schema
 * @see https://mongoosejs.com/docs/schematypes.html
 */
const UserSchema: Schema<UserDocument, UserModel, UserMethod> = new Schema<UserDocument, UserModel, UserMethod>({
    name: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique: true
    },
    password: {
        type: String,
        required: true,
        set: (password: string) => bcrypt.hashSync(password, 10)
    },
    profilePicture: {
        type: String,
        default: null
    },
    role: {
        type: String,
        default: 'user'
    }
}, { timestamps: true })

/**
 * @description Register soft delete plugin
 * @see https://www.npmjs.com/package/mongoose-delete
 */
UserSchema.plugin(MongooseDelete)

/**
 * @description Method to validate user password
 * @param {string} password The password to validate
 * @returns {Promise<boolean>}
 * @see https://www.npmjs.com/package/bcrypt
 */
UserSchema.method('validatePassword', async function (password: string): Promise<boolean> {
    return await bcrypt.compare(password, this.password)
})

/**
 * @description Method to generate JWT token
 * @returns {Promise<string>}
 * @see https://www.npmjs.com/package/jsonwebtoken
 */
UserSchema.method('generateToken', async function (): Promise<string> {
    return jwt.sign({ id: this._id }, config.app.secret)
})

/**
 * @description Method to find user by email
 * @param {string} email The user email address
 * @returns {Promise<UserDocument | null>}
 */
UserSchema.static('findByEmail', async function (email: string): Promise<UserDocument | null> {
    return await this.findOne({ email })
})

/**
 * @description Method to check if user email exists
 * @param {string} email The user email address
 * @returns {Promise<boolean>}
 */
UserSchema.static('emailExists', async function (email: string): Promise<boolean> {
    return !!await this.exists({ email })
})

/**
 * @description Method to verify JWT token
 * @param {string} token The JWT token
 * @returns {Promise<boolean>}
 * @see https://www.npmjs.com/package/jsonwebtoken
 */
UserSchema.static('verifyToken', async function (token: string): Promise<UserDocument | null> {
    const { id } = jwt.verify(token, config.app.secret) as { id: string }
    return await this.findById(id)
})

/**
 * @description User model
 * @constant User
 * @type {Model<UserInterface>}
 * @extends Model
 * @see https://mongoosejs.com/docs/models.html
 */
const User: UserModel = model<UserDocument, UserModel>('User', UserSchema)

export default User